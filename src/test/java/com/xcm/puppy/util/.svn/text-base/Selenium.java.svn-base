package com.xcm.puppy.util;

import java.awt.AWTException;
import java.awt.Robot;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;

public class Selenium {
	private static Logger logger = Logger.getLogger(Selenium.class.getName());

	private WebDriver driver;
	private long timeOutInSeconds = 10;

	public Selenium(WebDriver driver) {
		this.driver = driver;
		this.timeOutInSeconds = GlobalSettings.timeOutInSeconds;
	}

	public WebDriver getDriver() {
		return this.driver;
	}

	/**
	 * Open the specified page, and refresh if the driver is blocked for 60
	 * seconds.
	 * 
	 * @param url
	 *            The URL to load. It is best to use a fully qualified URL
	 */
	public void open(final String url) {
		try {
			Timer timer = new Timer();
			timer.schedule(new TimerTask() {
				public void run() {
					driver.get(url);
				}
			}, 60000);
			driver.get(url);
			logger.info("Opened the specified page " + url);
			timer.cancel();
		} catch (Exception e) {
			e.printStackTrace();
			handleFailure("Failed to open the page " + url);
		}
		driver.manage().window().maximize();
	}

	/**
	 * Quits this driver, closing every associated window.
	 * 
	 */
	public void quit() {
		driver.quit();
		logger.info("Quits this driver");
	}

	/**
	 * Click on the page element
	 * 
	 * @param locator
	 */
	public void click(String locator) {
		WebElement element = findElement(locator);
		if (null != element) {
			try {
				element.click();
				logger.info("Clicked on the element " + locator);
			} catch (Exception e) {
				e.printStackTrace();
				handleFailure("Failed to click the web element " + locator);
			}
		}
	}
	
	/**
	 * Click on the page element, by call the js.
	 * 
	 * @param locator
	 */
	public void mouseClick(String locator) {
		Robot rb = null;
		try {
			rb = new Robot();
		} catch (AWTException e) {
			e.printStackTrace();
		}
		rb.mouseMove(0, 0);

		WebElement element = findElement(locator);
		String code = "var fireOnThis = arguments[0];"
				+ "var evObj = document.createEvent('MouseEvents');"
				+ "evObj.initEvent('click',true,true);"
				+ "fireOnThis.dispatchEvent(evObj);";
		if (null != element) {
			try {
				((JavascriptExecutor) driver).executeScript(code, element);
				logger.info("Click on the page element " + locator);
			} catch (Exception e) {
				e.printStackTrace();
				handleFailure("Failed to click the page element " + locator);
			}
		}
	}

	/**
	 * Type text in the page element<br>
	 * Before typing, try to clear existed text
	 * 
	 * @param locator
	 * @param text
	 *            the input text
	 */
	public void sendkeys(String locator, String text) {
		WebElement element = findElement(locator);
		if (null != element) {
			try {
				element.clear();
				element.sendKeys(text);
				logger.info("Type " + text + " in the page element " + locator);
			} catch (Exception e) {
				e.printStackTrace();
				handleFailure("Failed to type " + text
						+ " in the page element " + locator);
			}
		}
	}

	/**
	 * Hover on the page element, by call the js.
	 * 
	 * @param locator
	 */
	public void mouseOver(String locator) {
		Robot rb = null;
		try {
			rb = new Robot();
		} catch (AWTException e) {
			e.printStackTrace();
		}
		rb.mouseMove(0, 0);

		WebElement element = findElement(locator);
		String code = "var fireOnThis = arguments[0];"
				+ "var evObj = document.createEvent('MouseEvents');"
				+ "evObj.initEvent('mouseover',true,true);"
				+ "fireOnThis.dispatchEvent(evObj);";
		if (null != element) {
			try {
				((JavascriptExecutor) driver).executeScript(code, element);
				logger.info("Mouse over the page element " + locator);
			} catch (Exception e) {
				e.printStackTrace();
				handleFailure("Failed to mouseover the page element " + locator);
			}
		}
	}

	/**
	 * Return text from web element
	 * 
	 * @param locator
	 * @return
	 */
	public String getText(String locator) {
		String text = "";
		WebElement element = findElement(locator);
		if (null != element) {
			try {
				text = element.getText();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return text;
	}

	/**
	 * Switch to the window which page source contains the specified message
	 * 
	 * @param pageMsg
	 */
	public void selectWindow(String pageMsg) {
		Set<String> windowHandles = driver.getWindowHandles();
		for (String windowHandle : windowHandles) {
			driver.switchTo().window(windowHandle);
			if (driver.getPageSource().contains(pageMsg)) {
				logger.info("Switched to window " + pageMsg);
				break;
			}
		}
	}

	/**
	 * Switch to the specified frame by id or name.
	 * 
	 * @param nameOrId
	 */
	public void accessFrame(String nameOrId) {
		driver.switchTo().frame(nameOrId);
		logger.info("Entered iframe " + nameOrId);
	}

	/**
	 * Take a screenshot
	 */
	public String takesScreenshot() {
		String dir = "screenshot";
		String time = new SimpleDateFormat("yyyyMMdd-HHmmss")
				.format(new Date());
		String screenshotPath = dir + File.separator + time + ".png";

		driver = new Augmenter().augment(driver);
		File srcFile = ((TakesScreenshot) driver)
				.getScreenshotAs(OutputType.FILE);
		try {
			FileUtils.copyFile(srcFile, new File(screenshotPath));
		} catch (IOException e) {
			e.printStackTrace();
			return "Failed to take screenshot";
		}
		return screenshotPath.replace("\\", "/");
	}

	/**
	 * Locate the web element in specified seconds.
	 * 
	 * @param locator
	 * @return
	 */
	public WebElement findElement(String locator) {
		By by = parseLocator(locator);
		WebElement element = null;
		try {
			WebDriverWait wait = new WebDriverWait(driver, timeOutInSeconds);
			element = wait.until(ExpectedConditions
					.presenceOfElementLocated(by));
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Can't locate the web element by the locator "
					+ locator);
		}
		return element;
	}

	public void handleFailure(String msg) {
		boolean takingScreenshots = GlobalSettings.takingScreenshots;
		if (takingScreenshots) {
			String basePath = System.getProperty("user.dir") + "/";
			String pngPath = takesScreenshot();
			Reporter.log("<a target=\"_blank\" href=\"" + basePath + pngPath
					+ "\" >" + msg + "</a>");
			msg = msg + " >> capture screenshot at " + pngPath;
		}
		logger.error(msg);
	}

	private By parseLocator(String locator) {
		String lowerLocator = locator.toLowerCase();
		String actualLocator;
		By by = null;
		if (lowerLocator.startsWith("id=")) {
			actualLocator = locator.substring(3);
			by = By.id(actualLocator);
		} else if (lowerLocator.startsWith("name=")) {
			actualLocator = locator.substring(5);
			by = By.name(actualLocator);
		} else if (lowerLocator.startsWith("class=")) {
			actualLocator = locator.substring(6);
			by = By.className(actualLocator);
		} else if (lowerLocator.startsWith("tag=")) {
			actualLocator = locator.substring(4);
			by = By.tagName(actualLocator);
		} else if (lowerLocator.startsWith("link=")) {
			actualLocator = locator.substring(5);
			by = By.partialLinkText(actualLocator);
		} else if (lowerLocator.startsWith("css=")) {
			actualLocator = locator.substring(4);
			by = By.cssSelector(actualLocator);
		} else if (lowerLocator.startsWith("xpath=")) {
			actualLocator = locator.substring(6);
			by = By.xpath(actualLocator);
		} else {
			logger.error("Format Error: id=,class=,tag=,name=,link=,css=,xpath=");
		}
		return by;
	}

}
